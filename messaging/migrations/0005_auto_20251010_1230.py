# Generated by Django 4.2.14 on 2025-10-10 09:30

from django.db import migrations, models
from django.contrib.auth import get_user_model

User = get_user_model()


def ensure_all_contacts_have_owner(apps, schema_editor):
    """Ensure all contacts have an owner before making field non-nullable."""
    Contact = apps.get_model('messaging', 'Contact')

    # Get any contacts that still don't have an owner
    contacts_without_owner = Contact.objects.filter(created_by__isnull=True)

    if contacts_without_owner.exists():
        # Get the first superuser or first user
        default_user = User.objects.filter(is_superuser=True).first()
        if not default_user:
            default_user = User.objects.first()

        if default_user:
            contacts_without_owner.update(created_by=default_user)
            print(f"Assigned {contacts_without_owner.count()} contacts to user: {default_user.email}")
        else:
            raise Exception("No users found to assign contacts to")


def reverse_ensure_contacts_have_owner(apps, schema_editor):
    """Reverse migration - no action needed."""
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("messaging", "0004_auto_20251010_1227"),
    ]

    operations = [
        migrations.RunPython(ensure_all_contacts_have_owner, reverse_ensure_contacts_have_owner),
        migrations.AlterField(
            model_name='contact',
            name='created_by',
            field=models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='created_contacts', to='accounts.user'),
        ),
    ]
