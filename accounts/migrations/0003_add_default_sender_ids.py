# Generated by Django 4.2.7 on 2024-01-15 10:30

from django.db import migrations


def add_default_sender_ids(apps, schema_editor):
    """
    Add default sender IDs for existing tenants that don't have them.
    """
    Tenant = apps.get_model('tenants', 'Tenant')
    SMSProvider = apps.get_model('messaging', 'SMSProvider')
    SMSSenderID = apps.get_model('messaging', 'SMSSenderID')
    SenderIDRequest = apps.get_model('messaging', 'SenderIDRequest')
    User = apps.get_model('accounts', 'User')
    
    for tenant in Tenant.objects.all():
        # Check if tenant already has a default sender ID
        existing_sender_id = SMSSenderID.objects.filter(
            tenant=tenant,
            sender_id='Taarifa-SMS',
            status='active'
        ).first()
        
        if existing_sender_id:
            print(f"Tenant {tenant.name} already has default sender ID")
            continue
            
        # Get or create SMS provider for this tenant
        sms_provider = SMSProvider.objects.filter(
            tenant=tenant,
            is_active=True
        ).first()
        
        if not sms_provider:
            # Create default SMS provider
            owner = tenant.memberships.filter(role='owner').first()
            if not owner:
                print(f"No owner found for tenant {tenant.name}")
                continue
                
            sms_provider = SMSProvider.objects.create(
                tenant=tenant,
                name="Default Beem Provider",
                provider_type="beem",
                is_active=True,
                is_default=True,
                api_key="",  # Will be configured later
                secret_key="",  # Will be configured later
                api_url="https://apisms.beem.africa/v1/send",
                cost_per_sms=0.0,
                currency="TZS",
                created_by=owner.user
            )
            print(f"Created SMS provider for tenant {tenant.name}")
        
        # Create default sender ID
        sender_id = SMSSenderID.objects.create(
            tenant=tenant,
            sender_id="Taarifa-SMS",
            provider=sms_provider,
            status='active',
            sample_content="A test use case for the sender name purposely used for information transfer.",
            created_by=sms_provider.created_by
        )
        print(f"Created default sender ID for tenant {tenant.name}")
        
        # Create default sender ID request for tracking (if we have a user and doesn't exist)
        if sms_provider.created_by:
            # Check if request already exists
            existing_request = SenderIDRequest.objects.filter(
                tenant=tenant,
                requested_sender_id='Taarifa-SMS'
            ).first()
            
            if not existing_request:
                default_request = SenderIDRequest.objects.create(
                    tenant=tenant,
                    user=sms_provider.created_by,
                    request_type='default',
                    requested_sender_id='Taarifa-SMS',
                    sample_content="A test use case for the sender name purposely used for information transfer.",
                    status='approved'
                )
                print(f"Created default sender ID request for tenant {tenant.name}")
            else:
                print(f"Default sender ID request already exists for tenant {tenant.name}")
        else:
            print(f"Skipped sender ID request for tenant {tenant.name} - no owner found")


def remove_default_sender_ids(apps, schema_editor):
    """
    Remove default sender IDs created by this migration.
    """
    SMSSenderID = apps.get_model('messaging', 'SMSSenderID')
    SenderIDRequest = apps.get_model('messaging', 'SenderIDRequest')
    
    # Remove default sender IDs
    SMSSenderID.objects.filter(
        sender_id='Taarifa-SMS',
        status='active'
    ).delete()
    
    # Remove default sender ID requests
    SenderIDRequest.objects.filter(
        requested_sender_id='Taarifa-SMS',
        request_type='default',
        status='approved'
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_alter_user_managers_remove_user_username'),
        ('tenants', '0001_initial'),
        ('messaging', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_default_sender_ids, remove_default_sender_ids),
    ]